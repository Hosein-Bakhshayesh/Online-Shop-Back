@page "/Cart"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="Cart-Item-List">
    <AuthorizeView Roles="User">
        <Authorized>
            <div class="alert alert-success @ShowDeleteSuccess">
                <button @onclick="CloseSuccess" class="close" data-dismiss="alert">&times;</button>

                با موفقیت انجام شد.
            </div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col" class="text-center">شماره</th>
                        <th scope="col" class="text-center">نام کالا</th>
                        <th scope="col" class="text-center">تصویر کالا</th>
                        <th scope="col" class="text-center">تعداد</th>
                        <th scope="col" class="text-center">قیمت کل</th>
                        <th scope="col" class="text-center">حذف</th>
                    </tr>
                </thead>
                <tbody>
                    @if (activeCart != null && cartItems != null && cartItems.Count > 0 && productViewModels != null)
                    {
                        @foreach (var item in cartItems)
                        {
                            <tr>
                                <th class="text-center">@(i++)</th>
                                <td>@productViewModels.Find(t=>t.ProductId == item.ProductId).ProductName</td>
                                <td class="text-center">
                                    <a href="@($"/ProductDetail/{item.ProductId}")">
                                        <img src="Images/Product-Image/@productViewModels.Find(t=>t.ProductId == item.ProductId).ProductImagePath" style="width:200px" />
                                    </a>
                                </td>
                                <td class="text-center">@item.Quantity</td>
                                <td class="text-center">@(Convert.ToInt32(item.Total).ToString("n0"))</td>
                                <th class="text-center">
                                    <button @onclick="()=>DeleteCartItem(item)" class="btn btn-outline-danger">حذف محصول</button>
                                </th>
                            </tr>
                        }
                        <tr class="thead-light">
                            <th colspan="5">جمع کل</th>
                            <td colspan="1" class="text-danger text-center">@(Convert.ToInt32(activeCart.Total).ToString("n0"))</td>
                        </tr>
                        <tr>
                            <td colspan="6" class="text-right">
                                <button class="btn btn-outline-success" @onclick="CreateOrder">تکمیل خرید</button>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center pt-3">
                                <span class=" text-danger">
                                    سبد خرید خالی میاشد.
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </Authorized>
        <NotAuthorized>
            <div class="container mt-2 alert alert-danger w-100">
                برای دسترسی به این قسمت ابتدا <a href="/Login">وارد</a> سایت شوید.
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>
@code {
    public UserInfoViewModel? user { get; set; }
    public CartViewModel? activeCart { get; set; }
    public List<CartItemViewModel>? cartItems { get; set; }
    public List<ProductViewModel>? productViewModels = new List<ProductViewModel>();
    public int i = 0;
    public string ShowDeleteSuccess = "d-none";
    private System.Threading.Timer? timer;
}

@functions {
    protected async override void OnInitialized()
    {
        i = 1;
        user = await httpClient.GetFromJsonAsync<UserInfoViewModel>("User/GetCurrentUser");
        if (user.UserName != null)
        {
            activeCart = await httpClient.GetFromJsonAsync<CartViewModel>("Cart/GetActiveCart");
            if (activeCart.CartId > 0)
            {
                timer = new System.Threading.Timer(async (object? stateInfo) =>
                {
                    cartItems = await httpClient.GetFromJsonAsync<List<CartItemViewModel>>($"Cart/GetItems/{activeCart.CartId}");
                    if (cartItems.Count > 0)
                    {
                        foreach (var item in cartItems)
                        {
                            ProductViewModel? model = await httpClient.GetFromJsonAsync<ProductViewModel>($"Product/Info/{item.ProductId}");
                            if (model != null)
                            {
                                productViewModels.Add(model);
                            }
                        }
                    }
                    StateHasChanged(); // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
                }, new System.Threading.AutoResetEvent(false), 1000, 1000); // fire every 2000 milliseconds
            }
        }
    }

    public void CreateOrder()
    {
        navigationManager.NavigateTo($"/OrderPayment/{activeCart.CartId}");
    }

    public async void DeleteCartItem(CartItemViewModel DeleteCart)
    {
        var res = await httpClient.PostAsJsonAsync<CartItemViewModel>("Cart/DeleteCartItem", DeleteCart);
        i = 1;
        cartItems = await httpClient.GetFromJsonAsync<List<CartItemViewModel>>($"Cart/GetItems/{activeCart.CartId}");
        if (cartItems.Count > 0)
        {
            productViewModels.Clear();
            foreach (var item in cartItems)
            {
                ProductViewModel? model = await httpClient.GetFromJsonAsync<ProductViewModel>($"Product/Info/{item.ProductId}");
                if (model != null)
                {
                    productViewModels.Add(model);
                }
            }
            ShowDeleteSuccess = "d-block";
        }
    }

    public void CloseSuccess()
    {
        ShowDeleteSuccess = "d-none";
    }


}
