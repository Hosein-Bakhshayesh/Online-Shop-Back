@page "/Admin-OrderList"
@using System.Globalization;
@inject HttpClient httpClient
@inject NavigationManager navigationManager

@layout AdminLayout

<PageTitle>لیست سفارشات</PageTitle>

<h3>لیست سفارشات سایت</h3>

<div class="alert alert-danger @DeliverSuccess">
    <button @onclick="CloseSuccess" class="close" data-dismiss="alert">&times;</button>
    با موفقیت انجام شد.
</div>

<table class="table table-bordered mt-3">
    <thead>
        <tr>
            <th scope="col" class="text-center">شماره</th>
            <th scope="col" class="text-center">نام</th>
            <th scope="col" class="text-center">مجموع فاکتور</th>
            <th scope="col" class="text-center">تاریخ</th>
            <th scope="col" class="text-center">وضعیت</th>
            <th colspan="3" class="text-center">گزینه‌ها</th>
        </tr>
    </thead>
    <tbody>
        @if (orders != null)
        {
            @foreach (var order in orders)
            {
                <tr>
                    <td>
                        @(i++)
                    </td>
                    <td>
                        @order.FirstName @order.LastName
                    </td>
                    <td class="text-center fw-bold">
                        @(Convert.ToInt32(order.Total).ToString("n0"))
                    </td>
                    <td class="text-center">
                        @order.Date
                    </td>
                    <td class="text-center">
                        @if (order.Status == "پرداخت موفق")
                        {
                            <span class="text-success">@order.Status</span>
                        }
                        else if (order.Status == "پرداخت ناموفق")
                        {
                            <span class="text-danger">@order.Status</span>
                        }
                        else if (order.Status == "تحویل داده شده")
                        {
                            <span class="text-info">@order.Status</span>
                        }

                    </td>
                    <td class="text-center" colspan="3">
                        @if (order.Status == "پرداخت موفق")
                        {
                            <button @onclick="()=>DeliverOrder(order.OrderId)" class="btn btn-info mx-1">تحویل</button>
                        }
                    </td>
                </tr>
            }
        }
        @if (TotalPageSize > 0)
        {
            <tr>
                <td colspan="8">
                    <div class="mt-3 mx-2 row">
                        <ul class="pagination">
                            @for (int pageIndex = 1; pageIndex <= TotalPageSize; pageIndex++)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@navigationManager.GetUriWithQueryParameter("page",pageIndex)">@(pageIndex)</a>
                                </li>
                            }
                        </ul>
                    </div>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td colspan="8" class="text-danger">نظری در سایت ثبت نشده است.</td>
            </tr>
        }
    </tbody>

</table>

@code {
    private List<OrderViewModel>? orders = new();
    PersianCalendar pc = new PersianCalendar();
    public string DeliverSuccess = "d-none";
    [Parameter, SupplyParameterFromQuery]
    public int page { get; set; } = 0;
    public int? TotalPageSize { get; set; }
    int i = 1;
}

@functions{
    //در زمان لود شدن صفحه، این اطلاعات فراخوانی میشود.
    protected async override Task OnParametersSetAsync()
    {
        orders = await httpClient.GetFromJsonAsync<List<OrderViewModel>>($"Order/GetAllOrders/{page}");
        TotalPageSize = await httpClient.GetFromJsonAsync<int>("Order/TotalPageCount/10");
        foreach (var item in orders)
        {
            DateTime dateTime = DateTime.Parse(item.Date);
            item.Date = string.Format("{0}/{1}/{2}", pc.GetYear(dateTime), pc.GetMonth(dateTime), pc.GetDayOfMonth(dateTime));
        }
        await base.OnParametersSetAsync();
    }

    //این تابع در زمان کلیک برروی دکمه تحویل، فراخوانی میشود و وضعیت سفارش را به تحویل داده شده تغییر میدهد
    public async Task DeliverOrder(int id)
    {
        if (id > 0)
        {
            var res = await httpClient.PostAsJsonAsync<int>("Order/DeliverOrder", id);
            DeliverSuccess = "d-block";
            orders = await httpClient.GetFromJsonAsync<List<OrderViewModel>>($"Order/GetAllOrders/{page}");
            TotalPageSize = await httpClient.GetFromJsonAsync<int>("Order/TotalPageCount/10");
        }
    }

    //این تابع، برای حذف سفارش استفاده میشود و کلیک برروی دکمه حذف فراخوانی میشود
    public async Task DeleteOrder(int id)
    {
        if (id > 0)
        {
            var res = await httpClient.PostAsJsonAsync<int>("Order/DeleteOrder", id);
            DeliverSuccess = "d-block";
            orders = await httpClient.GetFromJsonAsync<List<OrderViewModel>>($"Order/GetAllOrders/{page}");
            TotalPageSize = await httpClient.GetFromJsonAsync<int>("Order/TotalPageCount/10");
        }
    }

    //این تابع، برای بسته شدن هشدار استفاده میشود
    public void CloseSuccess()
    {
        DeliverSuccess = "d-none";
    }
}