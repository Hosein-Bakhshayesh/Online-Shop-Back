@page "/Login"
@using UniversityShopProject.Shared.ViewModels.Auth;
@using UniversityShopProjectModels.Models;
@layout AccountintLayout
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="main-box">
    <div class="form-box">
        <div class="btn-box d-flex justify-content-around">
            <div id="btn-active" class="h-100 top-0 position-absolute bg-info m-0 p-0" style="@btnActiveStyle"></div>
            <button type="button" class="toggle-btn text-center py-2 fw-bolder" @onclick="()=>Display('R')">
                ثبت
                نام
            </button>
            <button type="button" class="toggle-btn text-center py-2 fw-bolder" @onclick="()=>Display('L')">ورود</button>
        </div>
        <div class="social-icons d-flex justify-content-between m-auto">
            <NavLink href="#" class="text-dark text-decoration-none mb-4" target="_blank">
                <i id="instagram" class="fa fa-2x fa-instagram"></i>
            </NavLink>
            <NavLink href="#" class="text-dark text-decoration-none mb-4" target="_blank">
                <i id="telegram" class="fa fa-2x fa-telegram"></i>
            </NavLink>
            <NavLink href="#" class="text-dark text-decoration-none mb-4" target="_blank">
                <i id="facebook" class="fa fa-2x fa-facebook"></i>
            </NavLink>
            <NavLink href="#" class="text-dark text-decoration-none mb-4" target="_blank">
                <i id="linkedin" class="fa fa-2x fa-linkedin"></i>
            </NavLink>
        </div>
        <EditForm Model="@loginRequest" OnValidSubmit="@LoginUserReq" >
            <div class="alert alert-danger @ShowExistErrorLogin mb-3">
                نام کاربری یا رمز عبور اشتباه است.
            </div>
            <div class="input-group m-auto @DisplayLogin">
                <span class="text-danger">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </span>
                <InputText @bind-Value="loginRequest.UserName" class="input-field form-control w-100 my-2 border-0" placeholder="نام کاربری" />
                <InputText type="password" @bind-Value="loginRequest.Password" class="input-field form-control w-100 my-2 border-0" placeholder="رمز عبور" />
                <button type="submit" class="btn btn-success w-100 mt-2">ورود</button>
            </div>
        </EditForm>
        <EditForm Model="@registerViewModel" OnValidSubmit="@RegisterUser">
            <div class="alert alert-danger @ShowError mb-2">
                قوانین باید پذیرفته شود.
            </div>
            <div class="alert alert-danger @ShowExistError mb-2">
                کاربری با این نام کاربری قبلا در سایت ثبت شده است.
            </div>
            <div id="register" class="input-group m-auto @DisplayRegister">
                <span class="text-danger">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </span>
                <InputText @bind-Value="registerViewModel.Email" class="input-field form-control w-100 my-2 border-0" placeholder="ایمیل" />
                <InputText @bind-Value="registerViewModel.UserName" class="input-field form-control w-100 my-2 border-0" placeholder="نام کاربری" />
                <InputText type="password" @bind-Value="registerViewModel.Password" class="input-field form-control w-100 my-2 border-0" placeholder="رمز عبور" />
                <InputText type="password" @bind-Value="registerViewModel.PasswordConfirm" class="input-field form-control w-100 my-2 border-0" placeholder="تکرار رمز عبور" />
                <InputCheckbox @bind-Value="registerViewModel.AcceptRules" name="AcceptRules" id="AcceptRules" class="checkbox-R mt-3" />
                <span class="mt-3 ml-2">
                    <NavLink style="cursor:pointer;" class="text-danger" data-toggle="modal" data-target="#exampleModal">قوانین مقررات</NavLink> را
                    میپذیرم.
                </span>
                <button type="submit" class="btn btn-success w-100 mt-2">ثبت نام</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public string DisplayLogin = "d-block";
    public string DisplayRegister = "d-none";
    public string btnActiveStyle = "left:0%";
    public string ShowError = "d-none";
    public string ShowExistError = "d-none";
    public string ShowExistErrorLogin = "d-none";
    public LoginRequest loginRequest = new LoginRequest();
    public RegisterViewModel registerViewModel = new RegisterViewModel();

}
@functions{

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    public void Display(char temp)
    {
        switch (temp)
        {
            case 'L':
                {
                    DisplayLogin = "d-block";
                    DisplayRegister = "d-none";
                    btnActiveStyle = "left:0%";
                    break;
                }
            case 'R':
                {
                    DisplayLogin = "d-none";
                    DisplayRegister = "d-block";
                    btnActiveStyle = "left:50%";
                    break;
                }
        }
    }

    private async Task LoginUserReq()
    {
        var isExist = await httpClient.GetFromJsonAsync<bool>($"User/GetPermission/{loginRequest.UserName}/{loginRequest.Password}");
        if (isExist == false)
        {
            ShowExistErrorLogin = "d-block";
            return;
        }
        ShowExistErrorLogin = "d-none";
        var res = await httpClient.PostAsJsonAsync<LoginRequest>("User/LoginUser", loginRequest);
        if (res != null)
        {
            navigationManager.NavigateTo("/", true);
        }
    }

    private async Task RegisterUser()
    {
        if (registerViewModel.AcceptRules == false)
        {
            ShowError = "d-block";
        }
        else
        {
            ShowError = "d-none";
            var isExist = await httpClient.GetFromJsonAsync<bool>($"User/CheckUserName/{registerViewModel.UserName}");
            if (isExist == true)
            {
                ShowExistError = "d-block";
                return;
            }
            ShowExistError = "d-none";
            var res = await httpClient.PostAsJsonAsync<RegisterViewModel>("User/RegisterUser", registerViewModel);
            if (res != null)
            {
                navigationManager.NavigateTo("/", true);
            }
        }
    }
}
